<!--***********************************************************************************

   AvalonDock

   Copyright (C) 2007-2013 Xceed Software Inc.

   This program is provided to you under the terms of the New BSD
   License (BSD) as published at http://avalondock.codeplex.com/license 

   For more features, controls, and fast professional support,
   pick up AvalonDock in Extended WPF Toolkit Plus at http://xceed.com/wpf_toolkit

   Stay informed: follow @datagrid on Twitter or Like facebook.com/datagrids

  **********************************************************************************-->

<!--
    1. Window 태그를 사용하여 새창을 정의한다.
    2. x:Class 속성을 통해 해당 클래스의 이름을 지정하고 있다.
    3. xmlns 및 xmlns:x 속성을 통해 xaml에서 사용할 수있는 xml 네임스페이스를 정의한다.
    
    UseLayoutRounding="True" : 픽셀정렬을 수행하여 UI요소를 보다 선명하게 렌더링한다.
    
    xmlns 는 XML 네임스페이스를 정의하는데 사용되는 속성이다.
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 는
    WPF에서 사용되는 기본적인 XML 네임스페이스를 정의한다.

    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"는
    x: 프리픽스로 시작하는 다양한 속성들을 사용할 수 있도록 하는 네임스페이스를 정의하는 것이다.
    ex) x:Name 속성을 사용하여 xaml 요소에 이름을 지정할 수 있다.
    
    x:Class="AvalonDock.MVVMTestApp.MainWindow" 는
    현재 XAML 파일에서 사용하는 Code behind 파일의 클래스명을 지칭하는 것이다.
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 가 없다면 x:Class 속성을 사용할 수 없다.
    
    xmlns:local="clr-namespace:AvalonDock.MVVMTestApp"은
    local이라는 prefix를 정의하고, 이 namespace 를 AvalonDock.MVVMTestApp 이라는 CLR namespace에 매핑한다.
    이렇게 함으로써, XAML 파일 내에서 AvalonDock.MVVMTestApp의 타입과 멤버에 엑세스 할 수 있다.
    이벤트 처리기를 등록할 수 있다.
    
    CLR(Common Language Runtime)은 .Net Framework의 코드를 플랫폼 종속되지 않게 코드를 컴파일하고 실행하는 실행 환경이다.
    C# -> CIL(Common Intermediate Language, 플랫폼 종속되지 않는 중간언어) 로 컴파일 -> 네이티브 코드로 컴파일(CLR이 컴파일)
    
-->

<Window x:Class="OneClickLogViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:OneClickLogViewer"
        xmlns:local_views="clr-namespace:OneClickLogViewer.Views"
        xmlns:avalonDock="https://github.com/Dirkster99/AvalonDock"
        Title="MainWindow" Height="450" Width="800"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        ui:WindowHelper.UseModernWindowStyle="True"
        >
    
    <Window.Resources>
        <local:ActiveDocumentConverter x:Key="ActiveDocumentConverter"/>
        <avalonDock:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    </Window.Resources>

    <Grid>

        <!--Menu 컨트롤을 보이게 하기 위해 Row 크기를 Auto 로 지정해줌.-->
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Menu Grid.Row="0">
            <MenuItem Header="File">
                <MenuItem Header="New" Command="{Binding NewCommand}"/>
                <MenuItem Header="Open" Command="{Binding OpenCommand}"/>
                <!-- 메뉴 항목 사이의 가로 분리선 -->
                <Separator/>
                <MenuItem Header="Save" Command="{Binding ActiveDocument.SaveCommand}"/>
                <MenuItem Header="Save As..." Command="{Binding ActiveDocument.SaveAsCommand}"/>
                <Separator/>
                <MenuItem Header="Close" Command="{Binding ActiveDocument.CloseCommand}"/>
            </MenuItem>

            <!--
            IsChecked 속성은 메뉴아이템이 체크되었는지 여부를 나타내며, 해당 속성은 ViewModel의 FileStates.IsVisible 속성과 바인딩된다.
            Mode 속성은 바인딩 모드를 나타내며, TwoWay로 지정되어있어, 바인딩된 속성의 변경사항이 UI와 ViewModel 양쪽으로 전파된다.
            
            IsCheckable 속성은 해당 메뉴 아이템이 체크가능한지 여부를 나타낸다.
            True 로 지정되어 있으므로, 메뉴아이템은 체크가능한 메뉴아이템이다.
            이속성을 지정하지 않으면 기본값은 False가 된다.
            -->
            <MenuItem Header="Tools">
                <MenuItem Header="Properties" IsChecked="{Binding FileStats.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
            </MenuItem>

            <MenuItem Header="Layout">
                <MenuItem Header="Load" Command="{Binding LoadLayoutCommand, ElementName=mainWindow}"/>
                <MenuItem Header="Save" Command="{Binding SaveLayoutCommand, ElementName=mainWindow}"/>
                <MenuItem Header="Dump to Console" Click="OnDumpToConsole"/>
            </MenuItem>

        </Menu>

        <Grid Grid.Row="1" HorizontalAlignment="Left">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <DatePicker Grid.Column="0"/>
            <ui:SimpleTimePicker Grid.Column="1"></ui:SimpleTimePicker>
        </Grid>


        <!--
        DocumentsSource 속성은 바인딩되어있는 ViewModel의 Files 속성을 참조한다.
        이 속성은 App에서 열린 문서나 파일의 목록을 저장하는 ObservableCollection이다.
        
        DockingManager를 사용하여 창을 관리하면 도킹 가능한 창(Anchorable)과 문서 창 (Document)를 모두 다룰수있다.
        
        AnchorablesSource속성은 ViewModel의 Tools 속성과 바인딩되어, 
        애플리케이션의 다른 기능 또는 도구 창을 포함하는 ObservableCollection을 참조한다.
        -->
        <!--AnchorablesSource="{Binding Tools}" DocumentsSource="{Binding Files}"
        
        -->
        <avalonDock:DockingManager x:Name="dockManager" 
                                   AnchorablesSource="{Binding Tools}" 
                                   DocumentsSource="{Binding Files}"
                                   ActiveContent="{Binding ActiveDocument, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}"
                                   Grid.Row="2">
            <avalonDock:DockingManager.Theme>
                <avalonDock:Vs2013DarkTheme/>
            </avalonDock:DockingManager.Theme>

            <avalonDock:DockingManager.LayoutItemTemplateSelector>
                <local_views:PanesTemplateSelector>

                    <!--
                        PanestemplateSelector 클래스에서 정의한 FileViewTemplate 속성에 DataTemplate을 설정하는 부분
                        
                    -->
                    <local_views:PanesTemplateSelector.FileViewTemplate>
                        <DataTemplate>
                            <TextBox Text="{Binding TextContent, UpdateSourceTrigger=PropertyChanged}"
                                     BorderThickness="0" />
                        </DataTemplate>
                    </local_views:PanesTemplateSelector.FileViewTemplate>

                    <local_views:PanesTemplateSelector.FileStatsViewTemplate>
                        <DataTemplate>
                            <Border Padding="5">
                                <StackPanel Orientation="Vertical">
                                    <TextBlock Text="{Binding FileSize}"/>
                                    <TextBlock Text="{Binding LastModified}"/>
                                    <TextBox Text="test"/>
                                </StackPanel>
                            </Border>
                        </DataTemplate>
                    </local_views:PanesTemplateSelector.FileStatsViewTemplate>

                </local_views:PanesTemplateSelector>
            </avalonDock:DockingManager.LayoutItemTemplateSelector>

            <avalonDock:DockingManager.LayoutItemContainerStyleSelector>
                <local_views:PanesStyleSelector>

                    <local_views:PanesStyleSelector.ToolStyle>
                        <Style TargetType="{x:Type avalonDock:LayoutAnchorableItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                            <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                            <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
                        </Style>
                    </local_views:PanesStyleSelector.ToolStyle>

                    <!--
                    avalonDock:LayoutItem 여기에 Model 프로퍼티가 정의 되어있음.
                    -->
                    <local_views:PanesStyleSelector.FileStyle>
                        <Style TargetType="{x:Type avalonDock:LayoutItem}">
                            <Setter Property="Title" Value="{Binding Model.Title}"/>
                            <Setter Property="ToolTip" Value="{Binding Model.FilePath}"/>
                            <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                            <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                        </Style>
                    </local_views:PanesStyleSelector.FileStyle>

                </local_views:PanesStyleSelector>
            </avalonDock:DockingManager.LayoutItemContainerStyleSelector>

            <!--
            LayoutUpdateStrategy 속성에, LayoutInitializer 클래스 인스턴스 할당.
            -->
            <avalonDock:DockingManager.LayoutUpdateStrategy>
                <local:LayoutInitializer/>
            </avalonDock:DockingManager.LayoutUpdateStrategy>

            <avalonDock:LayoutRoot>
                <avalonDock:LayoutPanel Orientation="Vertical">
                    <avalonDock:LayoutDocumentPane/>
                    <avalonDock:LayoutAnchorablePane Name="ToolsPane" DockHeight="150">
                    </avalonDock:LayoutAnchorablePane>
                </avalonDock:LayoutPanel>
            </avalonDock:LayoutRoot>

        </avalonDock:DockingManager>
    </Grid>
</Window>
